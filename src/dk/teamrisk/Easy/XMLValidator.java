package dk.teamrisk.Easy;

import javax.xml.bind.DatatypeConverter;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

/**
 * To import this into your own project, simply copy-paste this file into the folder that contains your Java code.
 * (maybe add a package declaration, since this Java file doesn't have a package declaration).
 *
 * You can then validate documents by passing XML (as a string) to the static validates method.
 * An example of how this is done, is provided in the main-method, which you can run to see that the class works.
 *
 * UPDATE: Delete item worked. 
 * UPDATE: Fixed bug in itemDescription
 */
public class XMLValidator {
    public static boolean validates(String xml) {
        HashMap<String, byte[]> map = new HashMap<>();
        map.put(classPath, DatatypeConverter.parseBase64Binary(validatorClass));
        try {
            @SuppressWarnings("unchecked") Function<String, Boolean> validator = (Function<String, Boolean>) loadClass(new RuntimeClassLoader(map), DatatypeConverter.parseBase64Binary(validatorInstance));
            return validator.apply(xml);
        } catch (IOException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) {
        System.out.println(validates("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<item xmlns=\"http://www.cs.au.dk/dWebTek/2014\"><itemID>1455</itemID><itemName>Ristede l?g</itemName><itemURL>http://teamrisk.dk</itemURL><itemPrice>5</itemPrice><itemStock>24</itemStock><itemDescription><document>      \n" +
                "test<w:bold xmlns:w=\"http://www.cs.au.dk/dWebTek/2014\">bold</w:bold><w:list xmlns:w=\"http://www.cs.au.dk/dWebTek/2014\"><w:item>test</w:item></w:list>\n" +
                "MORE stuff<w:bold xmlns:w=\"http://www.cs.au.dk/dWebTek/2014\">bold</w:bold></document></itemDescription></item>"));
    }

    /*------------------------------------------------------------
    ---- You do not need to look at the stuff below this line ----
    ------------------------------------------------------------*/

    public static String validatorClass = "";
    public static String classPath = "dwebtek.webtekXsdThing.Validator";
    public static String validatorInstance = "rO0ABXNyACBkd2VidGVrLndlYnRla1hzZFRoaW5nLlZhbGlkYXRvciGav8YtNBX5AgAAeHA=";

    public static Object loadClass(ClassLoader loader, byte[] bytes) throws IOException, ClassNotFoundException {
        MyObjectInputStream is = new MyObjectInputStream(new ByteArrayInputStream(bytes), loader);
        Object object = is.readObject();
        is.close();
        return object;
    }


    public static final class RuntimeClassLoader extends ClassLoader {
        Map<String, byte[]> classes;
        public RuntimeClassLoader(Map<String, byte[]> classes) {
            super(RuntimeClassLoader.class.getClassLoader());
            this.classes = classes;
        }

        @Override
        public Class<?> loadClass(String s) {
            return findClass(s);
        }
        @Override
        public Class<?> findClass(String s) {
            try {
                return super.loadClass(s);
            } catch (Throwable exception) {
                byte[] bytes = classes.get(s);
                if (bytes != null) {
                    return defineClass(s, bytes, 0, bytes.length);
                }
            }
            return null;
        }
    }

    public static final class MyObjectInputStream extends java.io.ObjectInputStream {
        @Override
        public Class<?> resolveClass(ObjectStreamClass desc) throws IOException,ClassNotFoundException {
            try {
                return loader.loadClass(desc.getName());
            } catch (Exception e) {
                return super.resolveClass(desc);
            }
        }

        ClassLoader loader;
        public MyObjectInputStream(InputStream in, ClassLoader loader) throws IOException {
            super(in);
            this.loader = loader;
        }
    }
}
